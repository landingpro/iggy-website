"use strict";(self.webpackChunkiggy_website=self.webpackChunkiggy_website||[]).push([[1689],{7001:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"server/server-schema","title":"Schema","description":"Since the Iggy server supports a variety of transport protocols, it is important to have a common schema for all of them, that will represent the data in a unified way. Commands (requests), responses, data models, status codes, must be the same for all transports.","source":"@site/docs/server/schema.md","sourceDirName":"server","slug":"/server/schema","permalink":"/docs/server/schema","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"id":"server-schema","slug":"/server/schema","title":"Schema","sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Docker","permalink":"/docs/server/docker"},"next":{"title":"Benchmarking","permalink":"/docs/server/benchmarking"}}');var r=s(4848),t=s(8453);const l={id:"server-schema",slug:"/server/schema",title:"Schema",sidebar_position:4},d=void 0,c={},o=[{value:"Request schema",id:"request-schema",level:2},{value:"Response schema",id:"response-schema",level:2},{value:"Request codes",id:"request-codes",level:2},{value:"Shared",id:"shared",level:2},{value:"Consumer",id:"consumer",level:3},{value:"Identifier",id:"identifier",level:3},{value:"PolledMessages",id:"polledmessages",level:3},{value:"Message",id:"message",level:3},{value:"ConsumerOffsetInfo",id:"consumeroffsetinfo",level:3},{value:"Streams",id:"streams",level:2},{value:"Get stream",id:"get-stream",level:3},{value:"Get streams",id:"get-streams",level:3},{value:"Create stream",id:"create-stream",level:3},{value:"Delete stream",id:"delete-stream",level:3},{value:"Topics",id:"topics",level:2},{value:"Get topic",id:"get-topic",level:3},{value:"Get topics",id:"get-topics",level:3},{value:"Create topic",id:"create-topic",level:3},{value:"Delete topic",id:"delete-topic",level:3},{value:"Partitions",id:"partitions",level:2},{value:"Create partitions",id:"create-partitions",level:3},{value:"Delete partitions",id:"delete-partitions",level:3},{value:"Messages",id:"messages",level:2},{value:"Poll messages",id:"poll-messages",level:3},{value:"Send messages",id:"send-messages",level:3},{value:"Consumer offsets",id:"consumer-offsets",level:2},{value:"Get consumer offset",id:"get-consumer-offset",level:3},{value:"Store consumer offset",id:"store-consumer-offset",level:3},{value:"Consumer groups",id:"consumer-groups",level:2},{value:"Get consumer group",id:"get-consumer-group",level:3},{value:"Get consumer groups",id:"get-consumer-groups",level:3},{value:"Create consumer group",id:"create-consumer-group",level:3},{value:"Delete consumer group",id:"delete-consumer-group",level:3},{value:"Join consumer group",id:"join-consumer-group",level:3},{value:"Leave consumer group",id:"leave-consumer-group",level:3},{value:"System",id:"system",level:2},{value:"Get me",id:"get-me",level:3},{value:"Get client",id:"get-client",level:3},{value:"Get clients",id:"get-clients",level:3},{value:"Get stats",id:"get-stats",level:3}];function a(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Since the Iggy server supports a variety of transport protocols, it is important to have a common schema for all of them, that will represent the data in a unified way. Commands (requests), responses, data models, status codes, must be the same for all transports."}),"\n",(0,r.jsx)(n.p,{children:"Currently, there are 2 ways of data representation: JSON (text) and binary - any serialization format that you prefer such as bincode, SBE, flatbuffers, protobuf or even your custom one, as the server simply expects the raw bytes as the message payload."}),"\n",(0,r.jsxs)(n.p,{children:["The binary format is more compact and efficient, but it is not human-readable - it's being used by TCP and QUIC transports. The JSON format is used by HTTP transport - all the existing endpoints are available in the ",(0,r.jsx)(n.a,{href:"https://github.com/apache/iggy/blob/master/core/server/server.http",children:"server.http"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"request-schema",children:"Request schema"}),"\n",(0,r.jsx)(n.p,{children:"All the requests are represented as a binary message. The message consists of 3 parts: length, code and payload:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"length - 4-byte integer (u32) which represents the total length: code (4 bytes) + payload (N bytes)"}),"\n",(0,r.jsx)(n.li,{children:"code - 4-byte integer (u32) which represents the request code"}),"\n",(0,r.jsx)(n.li,{children:"payload - binary data of N bytes length"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"For example, if the payload is 100 bytes, the length will have a value of 104 (100 bytes for payload + 4 const bytes for the code). The message as whole will have 108 (4 + 4 + 100) bytes size."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"+-----------------------------------------------------------+\n|           |           |                                   |\n|  LENGTH   |   CODE    |              PAYLOAD              |\n|           |           |                                   |\n+-----------------------------------------------------------+\n|  4 bytes  |  4 bytes  |              N bytes              |\n"})}),"\n",(0,r.jsx)(n.h2,{id:"response-schema",children:"Response schema"}),"\n",(0,r.jsx)(n.p,{children:"All the responses are represented as a binary message. The message consists of 3 parts: status, length and payload:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"status - 4-byte integer (u32) which represents the status code. The status code is 0 for success and any other value for an error."}),"\n",(0,r.jsx)(n.li,{children:"length - 4-byte integer (u32) which represents the total length: status (4 bytes) + payload (N bytes)"}),"\n",(0,r.jsx)(n.li,{children:"payload - binary data of N bytes length"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"In case of errors, the length will be always equal to 0 and the payload will be empty."}),"\n",(0,r.jsx)(n.p,{children:"When trying to fetch the resource which may not exist, such as a stream, topic, user etc., the response will have a status code 0 (OK), but the payload will be empty, as there's no data to return."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"+-----------------------------------------------------------+\n|           |           |                                   |\n|  STATUS   |  LENGTH   |              PAYLOAD              |\n|           |           |                                   |\n+-----------------------------------------------------------+\n|  4 bytes  |  4 bytes  |              N bytes              |\n"})}),"\n",(0,r.jsx)(n.h2,{id:"request-codes",children:"Request codes"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"PING = 1;\nGET_STATS = 10;\nGET_SNAPSHOT_FILE = 11;\nGET_ME = 20;\nGET_CLIENT = 21;\nGET_CLIENTS = 22;\nGET_USER = 31;\nGET_USERS = 32;\nCREATE_USER = 33;\nDELETE_USER = 34;\nUPDATE_USER = 35;\nUPDATE_PERMISSIONS = 36;\nCHANGE_PASSWORD = 37;\nLOGIN_USER = 38;\nLOGOUT_USER = 39;\nGET_PERSONAL_ACCESS_TOKENS = 41;\nCREATE_PERSONAL_ACCESS_TOKEN = 42;\nDELETE_PERSONAL_ACCESS_TOKEN = 43;\nLOGIN_WITH_PERSONAL_ACCESS_TOKEN = 44;\nPOLL_MESSAGES = 100;\nSEND_MESSAGES = 101;\nFLUSH_UNSAVED_BUFFER = 102;\nGET_CONSUMER_OFFSET = 120;\nSTORE_CONSUMER_OFFSET = 121;\nGET_STREAM = 200;\nGET_STREAMS = 201;\nCREATE_STREAM = 202;\nDELETE_STREAM = 203;\nUPDATE_STREAM = 204;\nPURGE_STREAM = 205;\nGET_TOPIC = 300;\nGET_TOPICS = 301;\nCREATE_TOPIC = 302;\nDELETE_TOPIC = 303;\nUPDATE_TOPIC = 304;\nPURGE_TOPIC = 305;\nCREATE_PARTITIONS = 402;\nDELETE_PARTITIONS = 403;\nGET_CONSUMER_GROUP = 600;\nGET_CONSUMER_GROUPS = 601;\nCREATE_CONSUMER_GROUP = 602;\nDELETE_CONSUMER_GROUP = 603;\nJOIN_CONSUMER_GROUP = 604;\nLEAVE_CONSUMER_GROUP = 605;\n"})}),"\n",(0,r.jsx)(n.h2,{id:"shared",children:"Shared"}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"consumer",children:"Consumer"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"pub struct Consumer {\n    pub kind: ConsumerKind,\n    pub id: u32,\n}\n\npub enum ConsumerKind {\n    Consumer,       // Value = 1 (default)\n    ConsumerGroup   // Value = 2\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Consumer"})," is a simple structs which represents the type of the consumer. It can be either a consumer or a consumer group. This type is used when interacting with the messages related commands  data such as ",(0,r.jsx)(n.code,{children:"PollMessages"}),", ",(0,r.jsx)(n.code,{children:"GetConsumerOffset"})," and ",(0,r.jsx)(n.code,{children:"StoreConsumerOffset"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Serialization"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"kind"})," - 1 byte"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"id"})," - 4 bytes"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"identifier",children:"Identifier"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"pub struct Identifier {\n    pub kind: IdKind,\n    pub length: u8,\n    pub value: Vec<u8>\n}\n\npub enum IdKind {\n    Numeric,      // Value = 1 (default)\n    String        // Value = 2\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Identifier"})," is a struct which represents the identifier of the stream or topic. It consists of the ",(0,r.jsx)(n.code,{children:"kind"})," (numeric or string), ",(0,r.jsx)(n.code,{children:"length"})," (length of the identifier value) and ",(0,r.jsx)(n.code,{children:"value"})," (actual value of the identifier). The ",(0,r.jsx)(n.code,{children:"value"}),' is a vector of bytes, which can be either a numeric value (e.g. 1 encoded as const 4 bytes for u32 type) or a string (e.g. "my-stream") with variable length of UTF-8 string, maximum 255 bytes (chars). The total length varies between 3 (string type with a single char) and 257 bytes (string type with 255 chars).']}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Serialization"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"kind"})," - 1 byte"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"length"})," - 1 byte"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"value"})," - N bytes"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"polledmessages",children:"PolledMessages"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"pub struct PolledMessages {\n    pub partition_id: u32,\n    pub current_offset: u64,\n    pub messages: Vec<Message>,\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"PolledMessages"})," is a struct returned by the ",(0,r.jsx)(n.code,{children:"PollMessages"})," command. It consists of the ",(0,r.jsx)(n.code,{children:"partition_id"}),", ",(0,r.jsx)(n.code,{children:"current_offset"})," and ",(0,r.jsx)(n.code,{children:"messages"})," fields. The ",(0,r.jsx)(n.code,{children:"messages"})," field is a vector of ",(0,r.jsx)(n.code,{children:"Message"})," structs."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Serialization"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"partition_id"})," - 4 bytes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"current_offset"})," - 8 bytes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"messages_count"})," - 4 bytes (hidden field)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"messages"})," - N bytes"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"message",children:"Message"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"pub struct Message {\n    pub offset: u64,\n    pub state: MessageState,\n    pub timestamp: u64,\n    pub id: u128,\n    pub checksum: u32,\n    pub headers: Option<HashMap<HeaderKey, HeaderValue>>,\n    pub length: u32,\n    pub payload: Bytes,\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Message"})," consists of the ",(0,r.jsx)(n.code,{children:"offset"})," (offset of the message in the partition), ",(0,r.jsx)(n.code,{children:"state"})," (state of the message), ",(0,r.jsx)(n.code,{children:"timestamp"})," (timestamp of the message), ",(0,r.jsx)(n.code,{children:"id"})," (unique identifier of the message), ",(0,r.jsx)(n.code,{children:"checksum"})," (checksum of the message), ",(0,r.jsx)(n.code,{children:"headers"})," (optional headers of the message), ",(0,r.jsx)(n.code,{children:"length"})," (length of the payload) and ",(0,r.jsx)(n.code,{children:"payload"})," (actual payload of the message)."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Serialization"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"offset"})," - 8 bytes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"state"})," - 1 byte"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"timestamp"})," - 8 bytes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"id"})," - 16 bytes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"checksum"})," - 4 bytes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"headers"})," - N bytes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"length"})," - 4 bytes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"payload"})," - N bytes"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"consumeroffsetinfo",children:"ConsumerOffsetInfo"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"ConsumerOffsetInfo"})," is a struct returned by the ",(0,r.jsx)(n.code,{children:"GetConsumerOffset"})," command. It consists of the ",(0,r.jsx)(n.code,{children:"partition_id"}),", ",(0,r.jsx)(n.code,{children:"current_offset"})," and ",(0,r.jsx)(n.code,{children:"stored_offset"})," fields."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"pub struct ConsumerOffsetInfo {\n    pub partition_id: u32,\n    pub current_offset: u64,\n    pub stored_offset: u64,\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Serialization"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"partition_id"})," - 4 bytes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"current_offset"})," - 8 bytes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"stored_offset"})," - 8 bytes"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"streams",children:"Streams"}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"get-stream",children:"Get stream"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"pub struct GetStream {\n    pub stream_id: Identifier\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Code: 200"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Serialization"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"stream_id"})," - 3-257 bytes"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"get-streams",children:"Get streams"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"pub struct GetStreams {}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Code: 201"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Serialization"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Empty bytes"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"create-stream",children:"Create stream"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"pub struct CreateStream {\n    pub stream_id: u32,\n    pub name: String\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Code: 202"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Serialization"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"stream_id"})," - 3-257 bytes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"name_length"})," - 1 byte (hidden field)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"name"})," - 1-255 bytes"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"delete-stream",children:"Delete stream"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"pub struct DeleteStream {\n    pub stream_id: Identifier\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Code: 203"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Serialization"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"stream_id"})," - 3-257 bytes"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"topics",children:"Topics"}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"get-topic",children:"Get topic"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"pub struct GetTopic {\n    pub stream_id: Identifier,\n    pub topic_id: Identifier\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Code: 300"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Serialization"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"stream_id"})," - 3-257 bytes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"topic_id"})," - 3-257 bytes"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"get-topics",children:"Get topics"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"pub struct GetTopics {\n    pub stream_id: Identifier\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Code: 301"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Serialization"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"stream_id"})," - 3-257 bytes"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"create-topic",children:"Create topic"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"pub struct CreateTopic {\n    pub stream_id: Identifier,\n    pub topic_id: u32,\n    pub partitions_count: u32,\n    pub message_expiry: Option<u32>,\n    pub name: String,\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Code: 302"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Serialization"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"stream_id"})," - 3-257 bytes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"topic_id"})," - 3-257 bytes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"partitions_count"})," - 4 bytes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"name_length"})," - 1 byte (hidden field)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"name"})," - 1-255 bytes"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"delete-topic",children:"Delete topic"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"pub struct DeleteTopic {\n    pub stream_id: Identifier,\n    pub topic_id: Identifier\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Code: 303"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Serialization"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"stream_id"})," - 3-257 bytes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"topic_id"})," - 3-257 bytes"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"partitions",children:"Partitions"}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"create-partitions",children:"Create partitions"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"pub struct CreatePartitions {\n    pub stream_id: Identifier,\n    pub topic_id: Identifier,\n    pub partitions_count: u32\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Code: 402"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Serialization"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"stream_id"})," - 3-257 bytes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"topic_id"})," - 3-257 bytes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"partitions_count"})," - 4 bytes"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"delete-partitions",children:"Delete partitions"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"pub struct DeletePartitions {\n    pub stream_id: Identifier,\n    pub topic_id: Identifier,\n    pub partitions_count: u32\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Code: 403"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Serialization"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"stream_id"})," - 3-257 bytes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"topic_id"})," - 3-257 bytes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"partitions_count"})," - 4 bytes"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"messages",children:"Messages"}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"poll-messages",children:"Poll messages"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"pub struct PollMessages {\n    pub consumer: Consumer,\n    pub stream_id: Identifier,\n    pub topic_id: Identifier,\n    pub partition_id: u32,\n    pub strategy: PollingStrategy,\n    pub count: u32,\n    pub auto_commit: bool,\n}\n\npub struct PollingStrategy {\n    pub kind: PollingKind,\n    pub value: u64,\n}\n\npub enum PollingKind {\n    Offset,     // Value = 1 (default)\n    Timestamp,  // Value = 2\n    First,      // Value = 3\n    Last,       // Value = 4\n    Next,       // Value = 5\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Code: 100"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Serialization"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"consumer"})," - 5 bytes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"stream_id"})," - 3-257 bytes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"topic_id"})," - 3-257 bytes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"partition_id"})," - 4 bytes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"strategy"})," - 9 bytes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"count"})," - 4 bytes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"auto_commit"})," - 1 byte"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"send-messages",children:"Send messages"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"pub struct SendMessages {\n    pub stream_id: Identifier,\n    pub topic_id: Identifier,\n    pub partitioning: Partitioning,\n    pub messages: Vec<Message>\n}\n\npub struct Partitioning {\n    pub kind: PartitioningKind,\n    pub length: u8,\n    pub value: Vec<u8>\n}\n\npub enum PartitioningKind {\n    Balanced,     // Value = 1 (default)\n    PartitionId,  // Value = 2\n    MessagesKey   // Value = 3\n}\n\npub struct Message {\n    pub id: u128,\n    pub length: u32,\n    pub payload: Bytes // Memory-optimized vector of bytes\n    pub headers: Option<HashMap<HeaderKey, HeaderValue>> // Optional headers, see the changelog for more details\n}\n\npub struct HeaderKey(String);\n\npub struct HeaderValue {\n    pub kind: HeaderKind,\n    pub value: Vec<u8>\n}\n\npub enum HeaderKind {\n    Raw,\n    String,\n    Bool,\n    Int8,\n    Int16,\n    Int32,\n    Int64,\n    Int128,\n    Uint8,\n    Uint16,\n    Uint32,\n    Uint64,\n    Uint128,\n    Float32,\n    Float64\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Code: 101"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Serialization"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"stream_id"})," - 3-257 bytes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"topic_id"})," - 3-257 bytes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"partitioning"})," - 3-257 bytes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"messages"})," - 16 + 4 + N bytes per single message"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"consumer-offsets",children:"Consumer offsets"}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"get-consumer-offset",children:"Get consumer offset"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"pub struct GetConsumerOffset {\n    pub consumer: Consumer,\n    pub stream_id: Identifier,\n    pub topic_id: Identifier,\n    pub partition_id: u32\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Code: 120"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Serialization"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"consumer"})," - 5 bytes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"stream_id"})," - 3-257 bytes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"topic_id"})," - 3-257 bytes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"partition_id"})," - 4 bytes"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"store-consumer-offset",children:"Store consumer offset"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"pub struct StoreConsumerOffset {\n    pub consumer: Consumer,\n    pub stream_id: Identifier,\n    pub topic_id: Identifier,\n    pub partition_id: u32,\n    pub offset: u64\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Code: 121"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Serialization"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"consumer"})," - 5 bytes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"stream_id"})," - 3-257 bytes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"topic_id"})," - 3-257 bytes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"partition_id"})," - 4 bytes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"offset"})," - 8 bytes"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"consumer-groups",children:"Consumer groups"}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"get-consumer-group",children:"Get consumer group"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"pub struct GetConsumerGroup {\n    pub stream_id: Identifier,\n    pub topic_id: Identifier,\n    pub consumer_group_id: u32\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Code: 600"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Serialization"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"stream_id"})," - 3-257 bytes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"topic_id"})," - 3-257 bytes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"consumer_group_id"})," - 4 bytes"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"get-consumer-groups",children:"Get consumer groups"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"pub struct GetConsumerGroups {\n    pub stream_id: Identifier,\n    pub topic_id: Identifier\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Code: 601"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Serialization"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"stream_id"})," - 3-257 bytes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"topic_id"})," - 3-257 bytes"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"create-consumer-group",children:"Create consumer group"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"pub struct CreateConsumerGroup {\n    pub stream_id: Identifier,\n    pub topic_id: Identifier,\n    pub consumer_group_id: u32\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Code: 602"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Serialization"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"stream_id"})," - 3-257 bytes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"topic_id"})," - 3-257 bytes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"consumer_group_id"})," - 4 bytes"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"delete-consumer-group",children:"Delete consumer group"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"pub struct DeleteConsumerGroup {\n    pub stream_id: Identifier,\n    pub topic_id: Identifier,\n    pub consumer_group_id: u32\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Code: 603"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Serialization"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"stream_id"})," - 3-257 bytes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"topic_id"})," - 3-257 bytes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"consumer_group_id"})," - 4 bytes"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"join-consumer-group",children:"Join consumer group"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"pub struct JoinConsumerGroup {\n    pub stream_id: Identifier,\n    pub topic_id: Identifier,\n    pub consumer_group_id: u32\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Code: 604"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Serialization"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"stream_id"})," - 3-257 bytes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"topic_id"})," - 3-257 bytes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"consumer_group_id"})," - 4 bytes"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"leave-consumer-group",children:"Leave consumer group"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"pub struct LeaveConsumerGroup {\n    pub stream_id: Identifier,\n    pub topic_id: Identifier,\n    pub consumer_group_id: u32\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Code: 605"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Serialization"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"stream_id"})," - 3-257 bytes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"topic_id"})," - 3-257 bytes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"consumer_group_id"})," - 4 bytes"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"system",children:"System"}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"get-me",children:"Get me"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"pub struct GetMe {}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Code: 20"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Serialization"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Empty bytes"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"get-client",children:"Get client"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"pub struct GetClient {\n    pub client_id: u32\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Code: 21"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Serialization"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"client_id"})," - 4 bytes"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"get-clients",children:"Get clients"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"pub struct GetClients {}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Code: 22"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Serialization"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Empty bytes"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"get-stats",children:"Get stats"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"pub struct GetStats {}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Code: 10"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Serialization"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Empty bytes"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>d});var i=s(6540);const r={},t=i.createContext(r);function l(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);