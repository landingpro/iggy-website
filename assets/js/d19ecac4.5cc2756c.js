"use strict";(self.webpackChunkiggy_website=self.webpackChunkiggy_website||[]).push([[933],{7128:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>u,frontMatter:()=>c,metadata:()=>o,toc:()=>a});const o=JSON.parse('{"id":"connectors/connectors-sdk","title":"SDK","description":"SDK provides the commonly used structs and traits such as Sink and Source, along with the sinkconnector and sourceconnector macros to be used when developing connectors.","source":"@site/docs/connectors/sdk.md","sourceDirName":"connectors","slug":"/connectors/sdk","permalink":"/docs/connectors/sdk","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"connectors-sdk","slug":"/connectors/sdk","title":"SDK","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Runtime","permalink":"/docs/connectors/runtime"},"next":{"title":"Sink","permalink":"/docs/connectors/sink"}}');var s=t(4848),r=t(8453);const c={id:"connectors-sdk",slug:"/connectors/sdk",title:"SDK",sidebar_position:3},i=void 0,d={},a=[];function l(e){const n={code:"code",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["SDK provides the commonly used structs and traits such as ",(0,s.jsx)(n.code,{children:"Sink"})," and ",(0,s.jsx)(n.code,{children:"Source"}),", along with the ",(0,s.jsx)(n.code,{children:"sink_connector"})," and ",(0,s.jsx)(n.code,{children:"source_connector"})," macros to be used when developing connectors."]}),"\n",(0,s.jsxs)(n.p,{children:["Moreover, it contains both, the ",(0,s.jsx)(n.code,{children:"decoders"})," and ",(0,s.jsx)(n.code,{children:"encoders"})," modules, implementing either ",(0,s.jsx)(n.code,{children:"StreamDecoder"})," or ",(0,s.jsx)(n.code,{children:"StreamEncoder"})," traits, which are used when consuming or producing data from/to Iggy streams."]}),"\n",(0,s.jsx)(n.p,{children:"SDK is WiP, and it'd certainly benefit from having the support of multiple format schemas, such as Protobuf, Avro, Flatbuffers etc. including decoding/encoding the data between the different formats (when applicable) and supporting the data transformations whenever possible (easy for JSON, but complex for Bincode for example)."}),"\n",(0,s.jsxs)(n.p,{children:["Last but not least, the different ",(0,s.jsx)(n.code,{children:"transforms"})," are available, to transform (add, update, delete etc.) the particular fields of the data being processed via external configuration. It's as simple as adding a new transform to the ",(0,s.jsx)(n.code,{children:"transforms"})," section of the particular connector configuration:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",children:'[sources.random.transforms.add_fields]\nenabled = true\n\n[[sources.random.transforms.add_fields.fields]]\nkey = "message"\nvalue.static = "hello"\n'})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>i});var o=t(6540);const s={},r=o.createContext(s);function c(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);