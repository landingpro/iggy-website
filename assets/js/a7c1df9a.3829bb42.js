"use strict";(self.webpackChunkiggy_website=self.webpackChunkiggy_website||[]).push([[1163],{5574:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>t,toc:()=>u});var t=s(6934),r=s(4848),a=s(8453);const i={title:"Users and permissions",slug:"users-and-permissions",authors:[{name:"Piotr Gankiewicz",title:"Apache Iggy founder",url:"https://github.com/spetz"}],tags:["new-features","users","permissions"],hide_table_of_contents:!1},o=void 0,l={authorsImageUrls:[void 0]},u=[{value:"Breaking changes",id:"breaking-changes",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Authentication and authorization",id:"authentication-and-authorization",level:2},{value:"SDK",id:"sdk",level:2},{value:"Commands and models",id:"commands-and-models",level:2},{value:"HTTP API",id:"http-api",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["In the most recent update, the Iggy server as well as the clients for all the available transport protocols have been extended with the support for ",(0,r.jsx)(n.strong,{children:"users and permissions"}),". From now on, you can additionally secure your data using the authentication and authorization by specifying the granular set of permissions for each user."]}),"\n",(0,r.jsx)(n.h2,{id:"breaking-changes",children:"Breaking changes"}),"\n",(0,r.jsxs)(n.p,{children:["In general, there are no breaking changes, except a new field added to the ",(0,r.jsx)(n.code,{children:"ClientInfo"})," and ",(0,r.jsx)(n.code,{children:"ClientInfoDetails"})," structs returned by ",(0,r.jsx)(n.code,{children:"get_client()"})," and ",(0,r.jsx)(n.code,{children:"get_clients()"})," methods."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"pub struct ClientInfo {\n    pub client_id: u32,\n    pub user_id: Option<u32>, // New optional field\n    pub address: String,\n    pub transport: String,\n    pub consumer_groups_count: u32,\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"user_id"})," field is optional, and it's only returned when the user is authenticated. Otherwise, it's set to ",(0,r.jsx)(n.code,{children:"None"})," (0 value for binary transport) or ",(0,r.jsx)(n.code,{children:"null"})," (HTTP transport)."]}),"\n",(0,r.jsxs)(n.p,{children:["Keep in mind that the ",(0,r.jsx)(n.code,{children:"client"})," represents the application connected to the server - since it's possible that multiple applications would share the same user credentials, thus you can think of a ",(0,r.jsx)(n.code,{children:"client"})," as a single connection from the application to the server (1 user -> N clients)."]}),"\n",(0,r.jsxs)(n.p,{children:["This breaking change has been introduced with the commit ",(0,r.jsx)(n.a,{href:"https://github.com/apache/iggy/commit/23b330928aa38463ef907c95a9f672fa7b728881",children:"#23b3309"}),". The available ",(0,r.jsx)(n.a,{href:"https://crates.io/crates/iggy",children:"iggy crate"})," supports these changes since version 0.0.80."]}),"\n",(0,r.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,r.jsxs)(n.p,{children:["Currently, the authentication and authorization can be enabled in the ",(0,r.jsx)(n.code,{children:"server.toml"})," configuration via ",(0,r.jsx)(n.code,{children:"[system.user]"})," section:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",children:"[system.user]\nauthentication_enabled = true\nauthorization_enabled = true\n"})}),"\n",(0,r.jsx)(n.p,{children:"This might change in the future releases (e.g. authentication and authorization will always be enabled), but in order to avoid the breaking changes to the existing clients SDKs, these options are configurable for now."}),"\n",(0,r.jsxs)(n.p,{children:["The additional settings for HTTP API which uses JWT (JSON Web Token), can be found in the ",(0,r.jsx)(n.code,{children:"[http.jwt]"})," section:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",children:'[http.jwt]\nalgorithm = "HS256"\naudience = "iggy.rs"\nexpiry = 3600\nencoding_secret = "top_secret$iggy.rs$_jwt_HS256_key#!"\ndecoding_secret = "top_secret$iggy.rs$_jwt_HS256_key#!"\nuse_base64_secret = false\n'})}),"\n",(0,r.jsx)(n.h2,{id:"authentication-and-authorization",children:"Authentication and authorization"}),"\n",(0,r.jsxs)(n.p,{children:["The overall implementation of the users authentication and authorization is rather typical. All the server methods except ",(0,r.jsx)(n.code,{children:"ping"})," and ",(0,r.jsx)(n.code,{children:"login"})," require the user to be authenticated. The ",(0,r.jsx)(n.code,{children:"login"})," method is used to authenticate the user, and it returns the optional ",(0,r.jsx)(n.code,{children:"token"})," which is then used to authenticate the user in the subsequent requests. For now, the ",(0,r.jsx)(n.code,{children:"token"})," is only used by HTTP API based on JWT, for the binary transport there's no token - since, it's a stateful protocol, the server keeps track of the authenticated connections."]}),"\n",(0,r.jsx)(n.p,{children:"The authorization is based on the permissions, which are defined for each user. All the server methods have the specific authorization policies applied. For example, you can allow the user to read all the streams, or manage all the topics, while on the other hand, you could also specify only the set of particular streams or topics to which the user can send and/or poll the message to/from."}),"\n",(0,r.jsx)(n.p,{children:"Take a look at the following JSON example to get the overall idea:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "permissions": {\n    "global": {\n      "manage_servers": false,\n      "read_servers": true,\n      "manage_users": true,\n      "read_users": true,\n      "manage_streams": false,\n      "read_streams": true,\n      "manage_topics": false,\n      "read_topics": true,\n      "poll_messages": true,\n      "send_messages": true\n    },\n    "streams": {\n      "1": {\n        "manage_stream": false,\n        "read_stream": true,\n        "manage_topics": false,\n        "read_topics": true,\n        "poll_messages": true,\n        "send_messages": true,\n        "topics": {\n          "1": {\n            "manage_topic": false,\n            "read_topic": true,\n            "poll_messages": true,\n            "send_messages": true\n          }\n        }\n      }\n    }\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Each user might have the global permissions which do apply to all the available streams and topics, as well as the granular permissions for each stream and its topics (this is a simple hashmap using the stream or topic ID as its key)."}),"\n",(0,r.jsxs)(n.p,{children:["For example, the ",(0,r.jsx)(n.code,{children:"root user"}),", which has the default username and password ",(0,r.jsx)(n.code,{children:"iggy"})," and cannot be updated or deleted, can do everything, simply by having the following permissions:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "permissions": {\n    "global": {\n      "manage_servers": true,\n      "read_servers": true,\n      "manage_users": true,\n      "read_users": true,\n      "manage_streams": true,\n      "read_streams": true,\n      "manage_topics": true,\n      "read_topics": true,\n      "poll_messages": true,\n      "send_messages": true\n    },\n    "streams": null\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"sdk",children:"SDK"}),"\n",(0,r.jsxs)(n.p,{children:["The new ",(0,r.jsx)(n.code,{children:"UserClient"})," trait has been added in order to support the users and permissions feature. It is implemented for all the available transport protocols."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"pub trait UserClient {\n    async fn get_user(&self, command: &GetUser) -> Result<UserInfoDetails, Error>;\n    async fn get_users(&self, command: &GetUsers) -> Result<Vec<UserInfo>, Error>;\n    async fn create_user(&self, command: &CreateUser) -> Result<(), Error>;\n    async fn delete_user(&self, command: &DeleteUser) -> Result<(), Error>;\n    async fn update_user(&self, command: &UpdateUser) -> Result<(), Error>;\n    async fn update_permissions(&self, command: &UpdatePermissions) -> Result<(), Error>;\n    async fn change_password(&self, command: &ChangePassword) -> Result<(), Error>;\n    async fn login_user(&self, command: &LoginUser) -> Result<IdentityInfo, Error>;\n    async fn logout_user(&self, command: &LogoutUser) -> Result<(), Error>;\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"commands-and-models",children:"Commands and models"}),"\n",(0,r.jsx)(n.p,{children:"The following commands and response models have been added:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"pub struct IdentityInfo {\n    pub user_id: u32,\n    pub token: Option<String>,\n}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"pub struct UserInfo {\n    pub id: u32,\n    pub created_at: u64,\n    pub status: UserStatus,\n    pub username: String,\n}\n\npub struct UserInfoDetails {\n    pub id: u32,\n    pub created_at: u64,\n    pub status: UserStatus,\n    pub username: String,\n    pub permissions: Option<Permissions>,\n}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"pub struct Permissions {\n    pub global: GlobalPermissions,\n    pub streams: Option<HashMap<u32, StreamPermissions>>,\n}\n\npub struct GlobalPermissions {\n    pub manage_servers: bool,\n    pub read_servers: bool,\n    pub manage_users: bool,\n    pub read_users: bool,\n    pub manage_streams: bool,\n    pub read_streams: bool,\n    pub manage_topics: bool,\n    pub read_topics: bool,\n    pub poll_messages: bool,\n    pub send_messages: bool,\n}\n\npub struct StreamPermissions {\n    pub manage_stream: bool,\n    pub read_stream: bool,\n    pub manage_topics: bool,\n    pub read_topics: bool,\n    pub poll_messages: bool,\n    pub send_messages: bool,\n    pub topics: Option<HashMap<u32, TopicPermissions>>,\n}\n\npub struct TopicPermissions {\n    pub manage_topic: bool,\n    pub read_topic: bool,\n    pub poll_messages: bool,\n    pub send_messages: bool,\n}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"pub struct GetUser {\n    pub user_id: Identifier,\n}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"pub struct GetUsers {}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"pub struct CreateUser {\n    pub username: String,\n    pub password: String,\n    pub status: UserStatus,\n    pub permissions: Option<Permissions>,\n}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"pub struct DeleteUser {\n    pub user_id: Identifier,\n}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"pub struct UpdateUser {\n    pub user_id: Identifier,\n    pub username: Option<String>,\n    pub status: Option<UserStatus>,\n}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"pub struct UpdatePermissions {\n    pub user_id: Identifier,\n    pub permissions: Option<Permissions>,\n}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"pub struct ChangePassword {\n    pub user_id: Identifier,\n    pub current_password: String,\n    pub new_password: String,\n}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"pub struct LoginUser {\n    pub username: String,\n    pub password: String,\n}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"pub struct LogoutUser {}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Similar to the stream and topic ID, the user will always have the unique numeric ID and the username. The username must be within the range of 3\u201350 chars and will always be lowercased, using the same regex as the stream and topic name ",(0,r.jsx)(n.code,{children:"^[\\w\\.\\-\\s]+$"}),". The password must be within the range of 3\u2013100 chars and will be hashed using the bcrypt algorithm."]}),"\n",(0,r.jsx)(n.h2,{id:"http-api",children:"HTTP API"}),"\n",(0,r.jsxs)(n.p,{children:["The following endpoints have been added, and as always, you can find them in the ",(0,r.jsx)(n.code,{children:"server.http"})," file in the main repository."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'POST {{url}}/users/login\nContent-Type: application/json\n\n{\n  "username": "iggy",\n  "password": "iggy"\n}\n\nPOST {{url}}/users/logout\nAuthorization: Bearer {{token}}\nContent-Type: application/json\n\n{\n}\n\nPOST {{url}}/users\nAuthorization: Bearer {{token}}\nContent-Type: application/json\n\n{\n  "username": "user1",\n  "password": "secret",\n  "status": "active",\n  "permissions": null\n}\n\nGET {{url}}/users\nAuthorization: Bearer {{token}}\n\nGET {{url}}/users/user1\nAuthorization: Bearer {{token}}\n\nPUT {{url}}/users/user1\nAuthorization: Bearer {{token}}\nContent-Type: application/json\n\n{\n  "username": "user1,\n  "status": "active",\n  "permissions": null\n}\n\nPUT {{url}}/users/user1/password\nAuthorization: Bearer {{token}}\nContent-Type: application/json\n\n{\n  "current_password": "secret",\n  "new_password": "secret1"\n}\n\nPUT {{url}}/users/user1permissions\nAuthorization: Bearer {{token}}\nContent-Type: application/json\n\n{\n  "permissions": {\n    "global": {\n      "manage_servers": false,\n      "read_servers": true,\n      "manage_users": true,\n      "read_users": true,\n      "manage_streams": false,\n      "read_streams": true,\n      "manage_topics": false,\n      "read_topics": true,\n      "poll_messages": true,\n      "send_messages": true\n    },\n    "streams": {\n      "1": {\n        "manage_stream": false,\n        "read_stream": true,\n        "manage_topics": false,\n        "read_topics": true,\n        "poll_messages": true,\n        "send_messages": true,\n        "topics": {\n          "1": {\n            "manage_topic": false,\n            "read_topic": true,\n            "poll_messages": true,\n            "send_messages": true\n          }\n        }\n      }\n    }\n  }\n}\n\nDELETE {{url}}/users/user1\nAuthorization: Bearer {{token}}\n'})})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},6934:e=>{e.exports=JSON.parse('{"permalink":"/blogs/users-and-permissions","source":"@site/blog/2023-09-20-users-and-permissions.md","title":"Users and permissions","description":"In the most recent update, the Iggy server as well as the clients for all the available transport protocols have been extended with the support for users and permissions. From now on, you can additionally secure your data using the authentication and authorization by specifying the granular set of permissions for each user.","date":"2023-09-20T00:00:00.000Z","tags":[{"inline":true,"label":"new-features","permalink":"/blogs/tags/new-features"},{"inline":true,"label":"users","permalink":"/blogs/tags/users"},{"inline":true,"label":"permissions","permalink":"/blogs/tags/permissions"}],"readingTime":6.24,"hasTruncateMarker":true,"authors":[{"name":"Piotr Gankiewicz","title":"Apache Iggy founder","url":"https://github.com/spetz","socials":{},"key":null,"page":null}],"frontMatter":{"title":"Users and permissions","slug":"users-and-permissions","authors":[{"name":"Piotr Gankiewicz","title":"Apache Iggy founder","url":"https://github.com/spetz"}],"tags":["new-features","users","permissions"],"hide_table_of_contents":false},"unlisted":false,"prevItem":{"title":"Consumer identifier","permalink":"/blogs/consumer-identifier"},"nextItem":{"title":"Updated schemas","permalink":"/blogs/updated-schemas"}}')},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>o});var t=s(6540);const r={},a=t.createContext(r);function i(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);