"use strict";(self.webpackChunkiggy_website=self.webpackChunkiggy_website||[]).push([[512],{6619:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"connectors/connectors-runtime","title":"Runtime","description":"Runtime is responsible for managing the lifecycle of the connectors and providing the necessary infrastructure for the connectors to run.","source":"@site/docs/connectors/runtime.md","sourceDirName":"connectors","slug":"/connectors/runtime","permalink":"/docs/connectors/runtime","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"connectors-runtime","slug":"/connectors/runtime","title":"Runtime","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Introduction","permalink":"/docs/connectors/introduction"},"next":{"title":"SDK","permalink":"/docs/connectors/sdk"}}');var r=t(4848),i=t(8453);const s={id:"connectors-runtime",slug:"/connectors/runtime",title:"Runtime",sidebar_position:2},c=void 0,a={},d=[];function l(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Runtime is responsible for managing the lifecycle of the connectors and providing the necessary infrastructure for the connectors to run."}),"\n",(0,r.jsxs)(n.p,{children:["The runtime uses a shared ",(0,r.jsx)(n.a,{href:"https://tokio.rs",children:"Tokio runtime"})," to manage the asynchronous tasks and events across all connectors. Additionally, it has built-in support for logging via ",(0,r.jsx)(n.a,{href:"https://docs.rs/tracing/latest/tracing/",children:"tracing"})," crate."]}),"\n",(0,r.jsx)(n.p,{children:"The connector are implemented as Rust libraries, and these are loaded dynamically during the runtime initialization process."}),"\n",(0,r.jsxs)(n.p,{children:["Internally, ",(0,r.jsx)(n.a,{href:"https://github.com/OpenByteDev/dlopen2",children:"dlopen2"})," provides a safe and efficient way of loading the plugins via C FFI."]}),"\n",(0,r.jsx)(n.p,{children:"By default, runtime will look for the configuration file, to decide which connectors to load and how to configure them."}),"\n",(0,r.jsx)(n.p,{children:"The minimal viable configuration requires at least the Iggy credentials, to create 2 separate instances of producer & consumer connections."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",children:'[iggy]\naddress = "localhost:8090"\nusername = "iggy"\npassword = "iggy"\n# token = "secret" # Personal Access Token (PAT) can be used instead of username and password\n'})}),"\n",(0,r.jsxs)(n.p,{children:["All the other config sections start either with ",(0,r.jsx)(n.code,{children:"sources"})," or ",(0,r.jsx)(n.code,{children:"sinks"})," depending on the connector type."]}),"\n",(0,r.jsxs)(n.p,{children:["Keep in mind that either of ",(0,r.jsx)(n.code,{children:"toml"}),", ",(0,r.jsx)(n.code,{children:"yaml"}),", or ",(0,r.jsx)(n.code,{children:"json"})," formats are supported for the configuration file. The path to the configuration can be overriden by ",(0,r.jsx)(n.code,{children:"IGGY_CONNECTORS_RUNTIME_CONFIG_PATH"})," environment variable. Each configuration section can be also additionally updated by using the following convention ",(0,r.jsx)(n.code,{children:"IGGY_CONNECTORS_SECTION_NAME.KEY_NAME"})," e.g. ",(0,r.jsx)(n.code,{children:"IGGY_CONNECTORS_IGGY_USERNAME"})," and so on."]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>c});var o=t(6540);const r={},i=o.createContext(r);function s(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);